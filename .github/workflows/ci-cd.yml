name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: sa-east-1
  ECR_REPOSITORY: react-app

jobs:
  terraform:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init
        working-directory: ./infra

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infra

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="allowed_ssh_cidr=${{ secrets.ALLOWED_SSH_CIDR }}"
        working-directory: ./infra
      
      - name: Aguarda EC2 ficar pronta
        run: |
          echo "Obtendo o ID da instância criada via Terraform..."
          INSTANCE_ID=$(terraform output -raw instance_id)
          
          echo "Instância criada: $INSTANCE_ID"
          echo "Aguardando os status checks passarem..."
          aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID
          echo "Instância $INSTANCE_ID pronta para receber comandos!"
        working-directory: ./infra
        
  deploy:
    name: "Deploy Application"
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Get EC2 Instance ID
        id: get-ec2-id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=react-app-server*" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text)
          echo "instance-id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Send command to EC2 via SSM
        id: deploy-command
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ steps.get-ec2-id.outputs.instance-id }} \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy React App container" \
            --parameters 'commands=[
              "aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
              "docker stop react-app || true && docker rm react-app || true",
              "docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}",
              "docker run -d --name react-app -p 80:80 ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
            ]' \
            --region ${{ env.AWS_REGION }} \
            --query "Command.CommandId" \
            --output text)
          
          echo "command-id=$COMMAND_ID" >> $GITHUB_OUTPUT
        working-directory: ./infra

      - name: Wait and verify SSM execution
        run: |
          STATUS="InProgress"
          for i in {1..10}; do
            STATUS=$(aws ssm list-command-invocations \
              --command-id ${{ steps.deploy-command.outputs.command-id }} \
              --details \
              --query "CommandInvocations[0].Status" \
              --output text)
            echo "Current status: $STATUS"
            if [ "$STATUS" != "InProgress" ]; then break; fi
            sleep 10
          done

          if [ "$STATUS" != "Success" ]; then
            echo "SSM command failed with status: $STATUS"
            exit 1
          fi