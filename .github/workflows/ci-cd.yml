name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - closed

env:
  AWS_REGION: sa-east-1
  ECR_REPOSITORY: react-app

jobs:
  test:
    name: "Run Tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
  
      - name: Lint code
        run: pnpm run lint
  
      - name: Run tests with coverage
        run: pnpm run test:ci

  terraform:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v2
      - run: terraform init
        working-directory: ./infra
      - run: terraform validate
        working-directory: ./infra
      - run: terraform apply -auto-approve -var="allowed_ssh_cidr=${{ secrets.ALLOWED_SSH_CIDR }}" -var="discord_webhook_url=${{ secrets.DISCORD_WEBHOOK_URL }}"
        working-directory: ./infra

  deploy:
    name: "Deploy Application"
    runs-on: ubuntu-latest
    needs: terraform
    if: >
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'main')
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: Build, tag, and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'

      - name: Get EC2 Instance ID
        id: get-ec2-id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=react-app-server" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text)
          echo "instance-id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Wait for EC2 Instance Status Ok
        run: |
          aws ec2 wait instance-status-ok --instance-ids ${{ steps.get-ec2-id.outputs.instance-id }}

      - name: Wait for SSM Agent to be ready
        run: |
          for i in {1..16}; do
            STATUS=$(aws ssm describe-instance-information \
              --filters "Key=InstanceIds,Values=${{ steps.get-ec2-id.outputs.instance-id }}" \
              --query "InstanceInformationList[0].PingStatus" \
              --output text)
            if [ "$STATUS" == "Online" ]; then break; fi
            echo "SSM Agent ainda n√£o est√° pronto. Tentativa $i..."
            sleep 30
          done
          if [ "$STATUS" != "Online" ]; then
            echo "‚ùå SSM Agent n√£o ficou online a tempo."
            exit 1
          fi

      - name: Deploy via SSM
        id: deploy-command
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ steps.get-ec2-id.outputs.instance-id }} \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy React App container" \
            --parameters 'commands=[
              "aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
              "docker stop react-app || true && docker rm react-app || true",
              "docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}",
              "docker run -d --name react-app -p 80:80 ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
            ]' \
            --region ${{ env.AWS_REGION }} \
            --query "Command.CommandId" \
            --output text)
          echo "command-id=$COMMAND_ID" >> $GITHUB_OUTPUT

      - name: Verify SSM execution
        run: |
          STATUS="InProgress"
          for i in {1..10}; do
            STATUS=$(aws ssm list-command-invocations \
              --command-id ${{ steps.deploy-command.outputs.command-id }} \
              --details \
              --query "CommandInvocations[0].Status" \
              --output text)
            echo "SSM status: $STATUS"
            if [ "$STATUS" != "InProgress" ]; then break; fi
            sleep 10
          done
          if [ "$STATUS" != "Success" ]; then
            echo "‚ùå Deploy falhou com status: $STATUS"
            exit 1
          fi

      - name: Health check
        run: |
          EC2_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ steps.get-ec2-id.outputs.instance-id }} \
            --query "Reservations[].Instances[].PublicIpAddress" \
            --output text)

          echo "üîé Verificando health-check em http://$EC2_IP/healthz"

          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$EC2_IP/healthz)
            if [ "$STATUS" == "200" ]; then
              echo "‚úÖ Aplica√ß√£o saud√°vel!"
              exit 0
            fi
            echo "‚è≥ Tentativa $i: ainda n√£o est√° no ar (status=$STATUS)"
            sleep 10
          done

          echo "‚ùå Aplica√ß√£o n√£o respondeu 200 OK no /healthz"
          exit 1

  release:
    name: "Create GitHub Release"
    runs-on: ubuntu-latest
    needs: deploy
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: "Release v1.0.${{ github.run_number }}"
          draft: false
          prerelease: false